# Xerox printer status
- platform: snmp
  name: 'printer_status_message'
  host: !secret xerox_printer_ip
  baseoid: 1.3.6.1.2.1.43.18.1.1.8.1.1
  accept_errors: true

- platform: snmp
  name: 'prntray1sheetsremaining'
  host: !secret xerox_printer_ip
  baseoid: 1.3.6.1.2.1.43.8.2.1.10.1.1
  accept_errors: true
  
- platform: snmp
  name: 'Page Count'
  host: !secret xerox_printer_ip
  baseoid: 1.3.6.1.4.1.253.8.53.13.2.1.6.1.20.1
  accept_errors: true
  unit_of_measurement: 'pages'

- platform: snmp
  name: 'prncyanlvl'
  host: !secret xerox_printer_ip
  baseoid: 1.3.6.1.2.1.43.11.1.1.9.1.1
  accept_errors: true

- platform: snmp
  name: 'prncyancap'
  host: !secret xerox_printer_ip
  baseoid: 1.3.6.1.2.1.43.11.1.1.8.1.1
  accept_errors: true

- platform: snmp
  name: 'prnmagentalvl'
  host: !secret xerox_printer_ip
  baseoid: 1.3.6.1.2.1.43.11.1.1.9.1.2
  accept_errors: true

- platform: snmp
  name: 'prnmagentacap'
  host: !secret xerox_printer_ip
  baseoid: 1.3.6.1.2.1.43.11.1.1.8.1.2
  accept_errors: true

- platform: snmp
  name: 'prnyellowlvl'
  host: !secret xerox_printer_ip
  baseoid: 1.3.6.1.2.1.43.11.1.1.9.1.3
  accept_errors: true

- platform: snmp
  name: 'prnyellowcap'
  host: !secret xerox_printer_ip
  baseoid: 1.3.6.1.2.1.43.11.1.1.8.1.3
  accept_errors: true

- platform: snmp
  name: 'prnblacklvl'
  host: !secret xerox_printer_ip
  baseoid: 1.3.6.1.2.1.43.11.1.1.9.1.4
  accept_errors: true

- platform: snmp
  name: 'prnblackcap'
  host: !secret xerox_printer_ip
  baseoid: 1.3.6.1.2.1.43.11.1.1.8.1.4
  accept_errors: true

# UniFi router throughput monitoring
- platform: snmp
  name: router_wan_in
  host: 192.168.1.1
  baseoid: 1.3.6.1.2.1.2.2.1.10.4

- platform: snmp
  name: router_wan_out
  host: 192.168.1.1
  baseoid: 1.3.6.1.2.1.2.2.1.16.4
  
- platform: noaa_tides
  station_id: 8729210

- platform: plex
  token: !secret plex_token
  
- platform: darksky
  api_key: !secret darksky_api
  update_interval: '00:05'
  monitored_conditions:
    - temperature
    - nearest_storm_distance
        
- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /
    - type: disk_use_percent
      arg: /mnt/backups
    - type: memory_use_percent
    - type: processor_use
          
- platform: hp_ilo
  host: 192.168.1.5
  username: Administrator
  password: !secret ilo_pw
  monitored_variables:
    - name: fan1speed
      sensor_type: server_health
      unit_of_measurement: '%'
      value_template: '{{ ilo_data.fans["Fan 1"].speed[0] }}'
    - name: fan2speed
      sensor_type: server_health
      unit_of_measurement: '%'
      value_template: '{{ ilo_data.fans["Fan 2"].speed[0] }}'
    - name: fan3speed
      sensor_type: server_health
      unit_of_measurement: '%'
      value_template: '{{ ilo_data.fans["Fan 3"].speed[0] }}'
    - name: fan4speed
      sensor_type: server_health
      unit_of_measurement: '%'
      value_template: '{{ ilo_data.fans["Fan 4"].speed[0] }}'
    - name: fan5speed
      sensor_type: server_health
      unit_of_measurement: '%'
      value_template: '{{ ilo_data.fans["Fan 5"].speed[0] }}'
    - name: fan6speed
      sensor_type: server_health
      unit_of_measurement: '%'
      value_template: '{{ ilo_data.fans["Fan 6"].speed[0] }}'
    - name: system temp
      sensor_type: server_health
      unit_of_measurement: '°C'
      value_template: '{{ ilo_data.temperature["Temp 1"].currentreading[0] }}'
    - name: ambient temp
      sensor_type: server_health
      unit_of_measurement: '°C'
      value_template: '{{ ilo_data.temperature["Temp 29"].currentreading[0] }}'
    - name: cpu 1 temp
      sensor_type: server_health
      unit_of_measurement: '°C'
      value_template: '{{ ilo_data.temperature["Temp 2"].currentreading[0] }}'
    - name: cpu 2 temp
      sensor_type: server_health
      unit_of_measurement: '°C'
      value_template: '{{ ilo_data.temperature["Temp 3"].currentreading[0] }}'

- platform: speedtest
  server_id: 16618
  minute:
    - 7
#    - 27
#    - 47
  monitored_conditions:
    - ping
    - download
    - upload

- platform: sql
  db_url: !secret mysql_dburl
  queries:
  - name: 7 Day Average Download Speed
    query: >
             SELECT ROUND(AVG(avg_dlspeed),2) 'value'
             FROM (
               SELECT AVG(state) AS avg_dlspeed
               FROM hass.states
               WHERE entity_id = 'sensor.speedtest_download'
               AND state != 'unknown'
               AND state != ''
               AND created > NOW() - INTERVAL 1 WEEK
               GROUP BY DATE(created)
             ) avgs;
    column: 'value'
    unit_of_measurement: Mbit/s
  - name: 30 Day Average Download Speed
    query: >
             SELECT ROUND(AVG(avg_dlspeed),2) 'value'
             FROM (
               SELECT AVG(state) AS avg_dlspeed
               FROM hass.states
               WHERE entity_id = 'sensor.speedtest_download'
               AND state != 'unknown'
               AND state != ''
               AND created > NOW() - INTERVAL 1 MONTH
               GROUP BY DATE(created)
             ) avgs;
    column: 'value'
    unit_of_measurement: Mbit/s
  - name: HASS DB size
    query: >
             SELECT table_schema 'database', Round(Sum(data_length + index_length) / 1048576, 2) 'value' 
             FROM information_schema.tables 
             WHERE table_schema='hass' 
             GROUP BY table_schema;
    column: 'value'
    unit_of_measurement: MiB    
  - name: House Avg Temp 24h
    query: >
             SELECT ROUND(AVG(avg_housetemp),2) 'value'
             FROM (
               SELECT AVG(state) AS avg_housetemp
               FROM hass.states
               WHERE entity_id = 'sensor.house_average_temperature'
               AND state != 'unknown'
               AND state != ''
               AND created > NOW() - INTERVAL 1 DAY
               GROUP BY DATE(created)
             ) avgs;
    column: 'value'
    unit_of_measurement: '°F'
  - name: Average Download Throughput 24h
    query: >
             SELECT ROUND(AVG(avg_throughput),2) 'value'
             FROM (
               SELECT AVG(state) AS avg_throughput
               FROM hass.states
               WHERE entity_id = 'sensor.internet_speed_in'
               AND state != 'unknown'
               AND state != ''
               AND created > NOW() - INTERVAL 1 DAY
               GROUP BY DATE(created)
             ) avgs;
    column: 'value'
    unit_of_measurement: 'Mbit/s'
    
- platform: min_max
  entity_ids:
    - sensor.hp_ilo_fan1speed
    - sensor.hp_ilo_fan2speed
    - sensor.hp_ilo_fan3speed
    - sensor.hp_ilo_fan4speed
    - sensor.hp_ilo_fan5speed
    - sensor.hp_ilo_fan6speed
  type: mean
  name: Server Average Fanspeed
  round_digits: 1
 
- platform: min_max
  entity_ids:
    - sensor.vision_zp3111_multisensor_4in1_temperature
    - sensor.centralite_3326l_106cf116_1_1026
    - sensor.centralite_3320l_1099e14b_1_1026
    - sensor.2gig_technologies_ct101_thermostat_iris_temperature
  type: mean
  name: House Average Temperature
  round_digits: 1

- platform: history_stats
  name: HVAC Filter Time Used
  entity_id: binary_sensor.hvacfan
  state: 'on'
  type: time
  start: '{{ states.input_datetime.hvac_filter_last_changed.attributes.timestamp }}'
  end: '{{ now() }}'

- platform: history_stats
  name: HVAC Duty Cycle 24h
  entity_id: binary_sensor.hvacfan
  state: 'on'
  type: ratio
  duration:
    hours: 24
  end: '{{ now() }}'
  
- platform: template
  sensors:
    tray1_status:
      friendly_name: 'Paper Tray 1 status'
      value_template: '{% if is_state("sensor.prntray1sheetsremaining", "0") %}Out of paper{% else %}OK{% endif %}'
    cyan_toner_level:
      friendly_name: 'Cyan Toner Level'
      unit_of_measurement: '%'
      value_template: '{{ ((states.sensor.prncyanlvl.state | float) / (states.sensor.prncyancap.state | float)) * 100 | round(1) }}'
    magenta_toner_level:
      friendly_name: 'Magenta Toner Level'
      unit_of_measurement: '%'
      value_template: '{{ ((states.sensor.prnmagentalvl.state | float) / (states.sensor.prnmagentacap.state | float)) * 100 | round(1) }}'
    yellow_toner_level:
      friendly_name: 'Yellow Toner Level'
      unit_of_measurement: '%'
      value_template: '{{ ((states.sensor.prnyellowlvl.state | float) / (states.sensor.prnyellowcap.state | float)) * 100 | round(1) }}'
    black_toner_level:
      friendly_name: 'Black Toner Level'
      unit_of_measurement: '%'
      value_template: '{{ ((states.sensor.prnblacklvl.state | float) / (states.sensor.prnblackcap.state | float)) * 100 | round(1) }}'
    gunsafebattery:
      value_template: '{{ states.zwave.hank_hkzwdws01_doorwindow_sensor.attributes.battery_level }}'
      unit_of_measurement: '%'
      friendly_name: 'Gun Safe Sensor Battery'
      device_class: battery
    frontdoorbattery:
      value_template: '{{ states.zwave.front_door_sensor.attributes.battery_level }}'
      unit_of_measurement: '%'
      friendly_name: 'Front Door Sensor Battery'
      device_class: battery
    frontdoorlockbattery:
      value_template: '{{ states.zwave.kwikset_touchpad_electronic_deadbolt.attributes.battery_level }}'
      unit_of_measurement: '%'
      friendly_name: 'Front Door Lock Battery'
      device_class: battery
    sidedoorbattery:
      value_template: '{{ states.zwave.vision_zd2102_eu_doorwindow_sensor.attributes.battery_level }}'
      unit_of_measurement: '%'
      friendly_name: 'Side Door Sensor Battery'
      device_class: battery
    hallbathmultisensorbattery:
      value_template: '{{ states.zwave.bathroom_multisensor.attributes.battery_level }}'
      unit_of_measurement: '%'
      friendly_name: 'Hall Bath Multisensor Battery'
      device_class: battery
    sirenbattery:
      value_template: '{{ states.zwave.everspring_se812_siren.attributes.battery_level }}'
      unit_of_measurement: '%'
      friendly_name: 'Siren Battery'
      device_class: battery
    hallsmokebattery:
      value_template: '{{ states.zwave.first_alert_unknown_type0001_id0001.attributes.battery_level }}'
      friendly_name: 'Hall Smoke Detector Battery'
      unit_of_measurement: '%'
      device_class: battery
    internet_speed_in:
      friendly_name: 'Internet Throughput (down)'
      value_template: '{{ ((states.input_number.internet_traffic_delta_in.state | float ) / 1000000 ) | round(2) }}'
      unit_of_measurement: 'Mbit/s'
    internet_speed_out:
      friendly_name: 'Internet Throughput (up)'
      value_template: '{{ ((states.input_number.internet_traffic_delta_out.state | float ) / 1000000 ) | round(2) }}'
      unit_of_measurement: 'Mbit/s'
